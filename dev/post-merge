#!/usr/bin/python3

'''
    This hook happens after pull or after merge
'''


import sys
import os
import socket
import subprocess
from util import color, diff_file_path, get_branch_name, get_commit_hash, get_stdin_input, extract_branch_name, cmd, pg_sync, get_exec_data

command, input = get_exec_data('DEV_POST_MERGE_HOOK')

print(command[2])
current_branch = get_branch_name()
if command[2].startswith('git pull'):
    print('It is pull!')
    # Here can be integrated master and staging pull also
    # Like
    # if current_branch='staging': pg_from_env='staging'
    # elif current_branch='master': pg_from_env='master'
    pg_sync(pg_from_env='pg_branch',
            pg_to_env='pg_dev',
            pg_from_db=current_branch,
            pg_to_db=current_branch,
            pg_sql_file=diff_file_path('pull'),
            pg_apply=True,
            pg_create_from_db=True,
            pg_create_to_db=True)
elif command[2].startswith('git merge'):
    source_branch = command[2].strip("git merge ");
    print('It is merge with ', source_branch)
    pg_sync(pg_from_env='pg_dev',
            pg_to_env='pg_dev',
            pg_from_db=source_branch,
            pg_to_db=current_branch,
            pg_sql_file=diff_file_path('merge'),
            pg_apply=True,
            pg_create_from_db=True,
            pg_create_to_db=True)

# Check multi commit merge
# Solve git fetch hook

'''
1302
/bin/bash
git pull
/usr/lib/git-core/git merge FETCH_HEAD
/usr/bin/python3 ../hooks/dev/post-merge 0
ps -o args=1302

1353
/bin/bash
git merge branch1
/usr/bin/python3 ../hooks/dev/post-merge 0
ps -o args=1353
'''